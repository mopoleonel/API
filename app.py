# app.py - Adapt√© pour fonctionner avec l'API en ligne sur Render

import streamlit as st
import requests
import json
import os # os est toujours n√©cessaire pour d'autres usages Streamlit, mais pas pour dotenv ici

# --- Suppression des lignes li√©es √† python-dotenv ---
# from dotenv import load_dotenv
# load_dotenv() # Cette ligne n'est plus n√©cessaire

# --- Configuration de l'application Streamlit ---
st.set_page_config(page_title="G√©n√©rateur de Landing Page IA", layout="wide")
st.title("üöÄ G√©n√©rateur de Landing Page avec IA")
st.markdown("D√©crivez la landing page que vous souhaitez, et notre IA la g√©n√©rera pour vous !")

# --- Configuration du point de terminaison de l'API FastAPI en ligne ---
# URL de votre API FastAPI d√©ploy√©e sur Render
# Remplacez 'https://mon-api-landing-page.onrender.com' par l'URL r√©elle de votre service Render
FASTAPI_URL = "https://mon-api-landing-page.onrender.com"
GENERATE_ENDPOINT = f"{FASTAPI_URL}/generate-landing-page"

# --- Interface Streamlit ---
col1, col2 = st.columns([1, 2])

with col1:
    st.header("D√©crivez votre page")
    user_prompt = st.text_area(
        "D√©crivez votre landing page ici (ex: 'Une landing page moderne et minimaliste pour un service de coaching en ligne, avec un bouton d'appel √† l'action pour s'inscrire √† une session gratuite, et des t√©moignages.')",
        height=250,
        placeholder="D√©crivez le contenu, le style, les sections, et les appels √† l'action de votre landing page..."
    )

    if st.button("G√©n√©rer la Landing Page", type="primary"):
        if user_prompt:
            loading_message_placeholder = st.empty()
            loading_message_placeholder.info("G√©n√©ration en cours... Veuillez patienter quelques instants. Cela peut prendre un certain temps.")

            try:
                payload = {"prompt": user_prompt}
                headers = {"Content-Type": "application/json"}

                # Envoi de la requ√™te √† l'API FastAPI en ligne
                response = requests.post(GENERATE_ENDPOINT, headers=headers, data=json.dumps(payload))
                response.raise_for_status() # L√®ve une HTTPException pour les codes d'√©tat 4xx/5xx

                result = response.json()
                generated_html = result.get("html_content", "")

                if not generated_html:
                    loading_message_placeholder.warning("L'API a r√©pondu mais aucun contenu HTML n'a √©t√© trouv√©.")
                    st.session_state.generated_html = ""
                else:
                    st.session_state.generated_html = generated_html
                    st.session_state.show_preview = True
            except requests.exceptions.RequestException as e:
                loading_message_placeholder.error(f"Erreur lors de la connexion √† l'API en ligne: {e}")
                st.error(f"Veuillez v√©rifier que l'API FastAPI est bien accessible √† l'adresse {FASTAPI_URL}.")
                st.session_state.generated_html = ""
                st.session_state.show_preview = False
            except json.JSONDecodeError:
                loading_message_placeholder.error("Erreur : La r√©ponse de l'API n'est pas un JSON valide.")
                st.session_state.generated_html = ""
                st.session_state.show_preview = False
            except Exception as e:
                loading_message_placeholder.error(f"Une erreur inattendue est survenue: {e}")
                st.session_state.generated_html = ""
                st.session_state.show_preview = False
            finally:
                loading_message_placeholder.empty() # Efface le message de chargement
        else:
            st.warning("Veuillez saisir une description pour g√©n√©rer la landing page.")
            st.session_state.generated_html = ""
            st.session_state.show_preview = False
    else:
        # R√©initialiser au chargement de la page ou si le bouton n'est pas press√©
        if "show_preview" not in st.session_state:
            st.session_state.show_preview = False
        if "generated_html" not in st.session_state:
            st.session_state.generated_html = ""


# --- Section d'aper√ßu ---
with col2:
    st.header("Aper√ßu de la Landing Page")
    if st.session_state.show_preview and st.session_state.generated_html:
        st.success("Aper√ßu de la Landing Page g√©n√©r√©e :")
        # Utiliser components.v1.html pour rendre le HTML g√©n√©r√©
        st.components.v1.html(st.session_state.generated_html, height=800, scrolling=True)
    else:
        st.info("Votre aper√ßu appara√Ætra ici apr√®s la g√©n√©ration.")
